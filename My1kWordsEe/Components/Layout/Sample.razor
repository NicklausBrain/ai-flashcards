@using My1kWordsEe.Services;
@using My1kWordsEe.Models;
@using CSharpFunctionalExtensions;
@using System.Text.Json

@inject OpenAiService OpenAiService;
@inject TartuNlpService TartuNlpService;
@inject StabilityAiService StabilityAiService;
@inject LocalFileService LocalFileService;
@inject IJSRuntime JS

@code {
    [Parameter]
    public string EeWord { get; set; }

    private Result<SampleSentence>? sentence;

    private bool isImageLoading = false;
    private Result<Uri>? imageUrl;

    protected override async Task OnInitializedAsync()
    {
        sentence = await OpenAiService.GetSampleSentence(EeWord);
        if (sentence.Value.IsSuccess)
        {
            var eeText = sentence.Value.Value.EeSentence;
            await LocalFileService.Save(
                $"{eeText}json",
                new MemoryStream(JsonSerializer.SerializeToUtf8Bytes(sentence.Value.Value)));
        }
    }

    private async Task PlaySample(MouseEventArgs e)
    {
        var hasAudio = await JS.InvokeAsync<bool>("hasAudio");

        if (!hasAudio && sentence.HasValue && sentence.Value.IsSuccess)
        {
            var eeText = sentence.Value.Value.EeSentence;
            var audioStream = await TartuNlpService.GetSpeech(eeText);
            await LocalFileService.Save($"{eeText.Replace(' ', '_')}wav", audioStream);
            audioStream.Position = 0;
            var dotnetImageStream = new DotNetStreamReference(audioStream);

            await JS.InvokeVoidAsync("setAudioSample", "sampleAudio", dotnetImageStream);
        }

        await JS.InvokeVoidAsync("playAudioSample");
    }

    private async Task ImageSample(MouseEventArgs e)
    {
        isImageLoading = true;
        if (!imageUrl.HasValue && sentence.HasValue && sentence.Value.IsSuccess)
        {
            var enText = sentence.Value.Value.EnSentence;
            var prompt = await OpenAiService.GetDallEPrompt(enText);
            var imageStream = await StabilityAiService.GenerateImage(prompt.Value);
            if (imageStream.IsFailure)
            {
                imageUrl = Result.Failure<Uri>(imageStream.Error);
                return;
            }
            await LocalFileService.Save($"{enText.Replace(' ', '_')}jpg", imageStream.Value);
            imageStream.Value.Position = 0;
            var dotnetImageStream = new DotNetStreamReference(imageStream.Value);
            await JS.InvokeVoidAsync("setImageSample", "sampleImage", dotnetImageStream);
        }
        isImageLoading = false;
    }
}

<script>
    window.setAudioSample = async (audioElementId, audioStream) => {
        debugger;
        const arrayBuffer = await audioStream.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const audio = document.getElementById(audioElementId);
        audio.onload = () => {
            URL.revokeObjectURL(url);
        }
        audio.src = url;
    };
    window.setImageSample = async (imageElementId, audioStream) => {
        const arrayBuffer = await audioStream.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const image = document.getElementById(imageElementId);
        debugger;
        image.src = url;
        image.className = '';
    };
    window.playAudioSample = async () => {
        const audio = document.getElementById('sampleAudio');
        await audio.play();
    };
    window.hasAudio = () => {
        const audio = document.getElementById('sampleAudio');
        return audio.src ? true : false;
    };
</script>

<div>
    <div class="row">
        @if (sentence == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (sentence.Value.IsSuccess)
        {
            <ul class="list-group">
                <li class="list-group-item">
                    <button type="button" class="btn btn-primary" @onclick="PlaySample">
                        <i class="bi bi-volume-down-fill"></i>
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ImageSample">
                        <i class="bi bi-card-image"></i>
                    </button>
                    <audio id="sampleAudio"></audio>
                </li>
                <li class="list-group-item">
                    @sentence.Value.Value.EeSentence
                </li>
                <li class="list-group-item">
                    @sentence.Value.Value.EnSentence
                </li>
                <li class="list-group-item">
                    <img id="sampleImage" width="256" height="256" class="d-none" />

                    @if (imageUrl.HasValue)
                    {
                        if (imageUrl.Value.IsFailure)
                        {
                            @imageUrl.Value.Error
                        }
                    }

                    @if (isImageLoading){
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </li>
            </ul>
        }
        else
        {
            <p><em>@sentence.Value.Error</em></p>
        }
    </div>
</div>
