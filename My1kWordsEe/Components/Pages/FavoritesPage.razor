@page "/favorites"
@rendermode @(new InteractiveServerRenderMode(prerender: true))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using Microsoft.AspNetCore.Components.Authorization
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Models;
@using My1kWordsEe.Components.Layout;
@using My1kWordsEe.Services.Cqs
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject GetFavoritesQuery GetFavoritesQuery
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject AddToFavoritesCommand AddToFavoritesCommand
@inject RemoveFromFavoritesCommand RemoveFromFavoritesCommand

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private ClaimsPrincipal? User;

    private Maybe<Result<Favorites>> Favorites;

    private List<SampleWord> SampleWordsList = new List<SampleWord>();

    private void OnWordsListUpdate(SortableListEventArgs args)
    {
        var itemToMove = SampleWordsList[args.OldIndex];

        SampleWordsList.RemoveAt(args.OldIndex);

        if (args.NewIndex < SampleWordsList.Count)
            SampleWordsList.Insert(args.NewIndex, itemToMove);
        else
            SampleWordsList.Add(itemToMove);
    }

    public record Employee(int Id, string? Name);

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            User = authState.User;
            var user = await UserAccessor.GetRequiredUserAsync(authState.User);
            Favorites = await GetFavoritesQuery.Invoke(user.Id);
            SampleWordsList = Favorites.Value.Value.Words.Values.ToList();
        }

        await base.OnParametersSetAsync();
    }

    private async Task AddToFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        var user = await UserAccessor.GetRequiredUserAsync(User);
        Favorites = await AddToFavoritesCommand.Invoke(user.Id, favorite);
        await Task.Delay(300);
        PreloadService.Hide();
        StateHasChanged();
    }

    private async Task RemoveFromFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        var user = await UserAccessor.GetRequiredUserAsync(User);
        Favorites = await RemoveFromFavoritesCommand.Invoke(user.Id, favorite);
        await Task.Delay(300);
        PreloadService.Hide();
        StateHasChanged();
    }

    private IDictionary<string, SampleWord> FavoriteWords => Favorites.Value.Value.Words;

    private IDictionary<string, SampleSentence> FavoriteSentences => Favorites.Value.Value.Sentences;
}

<PageTitle>Favorites | Lemmikud</PageTitle>

<h1>Favorites | Lemmikud</h1>

<div class="text-center">
    @if (Favorites.HasValue && Favorites.Value.IsSuccess)
    {
        <Tabs EnableFadeEffect="true">
            <Tab Title="Words" Active="true">
                <Content>
                    @if (FavoriteWords.Any())
                    {
                        <SortableGrid TItem="SampleWord"
                                      Data="SampleWordsList"
                                      Context="item"
                                      OnUpdate="@OnWordsListUpdate">
                            <ItemTemplate>
                                <Card role="button">
                                    <CardBody>
                                        <CardTitle Class="row">
                                            @* <div class="bb-sortable-list-handle pe-2"><Icon Name="IconName.GripVertical" /></div> *@
                                            <div class="col-1"></div>
                                            <div class="col-10">@item.EeWord</div>
                                            <div class="col-1">
                                                <a href="@($"/word/{item.EeWord}")" target="_blank">
                                                    <i role="link" class="bi bi-box-arrow-up-right float-end"></i>
                                                </a>
                                            </div>
                                        </CardTitle>
                                        <CardSubTitle>@item.EnWord</CardSubTitle>
                                        <CardText>@item.EnExplanation</CardText>
                                    </CardBody>
                                </Card>
                            </ItemTemplate>
                        </SortableGrid>
                    }
                    else
                    {
                        <p class="mt-3">No favorite words yet</p>
                    }
                </Content>
            </Tab>
            <Tab Title="Sentences">
                <Content>
                    <div class="row">
                        @if (FavoriteSentences.Any())
                        {
                            @foreach (var sentencePair in FavoriteSentences)
                            {
                                var sentence = sentencePair.Value;
                                <div class="col col-12 col-sm-6 p-1">
                                    <SampleV2 Sample="sentence"
                                              AddToFavorites="AddToFavorites"
                                              RemoveFromFavorites="RemoveFromFavorites"
                                              IsFavorite="true">
                                    </SampleV2>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="mt-3">No favorite sentences yet</p>
                        }
                    </div>
                </Content>
            </Tab>
        </Tabs>
    }

    @if (Favorites.HasNoValue)
    {
        <div class="text-center">
            <Spinner />
        </div>
    }

    @if (Favorites.HasValue && Favorites.Value.IsFailure)
    {
        <h3 class="alert-warning">@Favorites.Value.Error</h3>
    }
</div>


<Preload LoadingText="Loading..." />