@page "/favorites"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Models;
@using My1kWordsEe.Components.Layout;
@using My1kWordsEe.Models.Semantics
@using My1kWordsEe.Services.Cqs
@using My1kWordsEe.Services.Scoped

@inject FavoritesStateContainer FavoritesStateContainer;

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private Maybe<Result<Favorites>> Favorites;

    private List<EtWord> EtWordsList = new List<EtWord>();

    private async void OnWordsListUpdate(SortableListEventArgs args)
    {
        var itemToMove = EtWordsList[args.OldIndex];

        EtWordsList.RemoveAt(args.OldIndex);

        if (args.NewIndex < EtWordsList.Count)
            EtWordsList.Insert(args.NewIndex, itemToMove);
        else
            EtWordsList.Add(itemToMove);

        await FavoritesStateContainer.ReorderAsync(EtWordsList);
    }

    public record Employee(int Id, string? Name);

    protected override async Task OnParametersSetAsync()
    {
        Favorites = await FavoritesStateContainer.GetAsync();
        if (Favorites.HasValue && Favorites.Value.IsSuccess)
        {
            EtWordsList = Favorites.Value.Value.Words.Values.ToList();
        }

        await base.OnParametersSetAsync();
    }

    private async Task AddToFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        Favorites = await FavoritesStateContainer.AddAsync(favorite);
        await Task.Delay(300);
        PreloadService.Hide();
        await OnParametersSetAsync();
        StateHasChanged();
    }

    private async Task RemoveFromFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        Favorites = await FavoritesStateContainer.RemoveAsync(favorite);
        await Task.Delay(300);
        PreloadService.Hide();
        await OnParametersSetAsync();
        StateHasChanged();
    }

    private IDictionary<string, EtWord> FavoriteWords => Favorites.Value.Value.Words;

    private IDictionary<string, SampleSentenceWithMedia> FavoriteSentences => Favorites.Value.Value.Sentences;

    private IDictionary<string, int> Stats => Favorites.Value.Value.Stats;
}

<PageTitle>Favorites | Lemmikud</PageTitle>

<h1>Favorites | Lemmikud</h1>

<div class="text-center">
    @if (Favorites.HasValue && Favorites.Value.IsSuccess)
    {
        <Tabs EnableFadeEffect="true">
            <Tab Title="Words" Active="true">
                <Content>
                    @if (FavoriteWords.Any())
                    {
                        <SortableGrid TItem="EtWord" Data="EtWordsList" Context="item" OnUpdate="@OnWordsListUpdate">
                            <ItemTemplate>
                                <Card role="button">
                                    <CardBody>
                                        <CardTitle Class="row">
                                            <div class="col-1">
                                                <i role="button" class="bi bi-x"
                                                    @onclick="@(() => RemoveFromFavorites(item))"></i>
                                            </div>
                                            <div class="col-10">@item.Value</div>
                                            <div class="col-1">
                                                <a href="@($"/word/{item.Value}")" target="_blank">
                                                    <i role="link" class="bi bi-box-arrow-up-right float-end"></i>
                                                </a>
                                            </div>
                                        </CardTitle>
                                        <CardSubTitle>@item.DefaultSense.Word.En</CardSubTitle>
                                        <CardText>@item.DefaultSense.Definition.En</CardText>
                                    </CardBody>
                                </Card>
                            </ItemTemplate>
                        </SortableGrid>
                    }
                    else
                    {
                        <p class="mt-3">No favorite words yet</p>
                    }
                </Content>
            </Tab>
            <Tab Title="Sentences">
                <Content>
                    <div class="row">
                        @if (FavoriteSentences.Any())
                        {
                            @foreach (var sentencePair in FavoriteSentences)
                            {
                                var sentence = sentencePair.Value;
                                <div class="col col-12 col-sm-6 p-1">
                                    <SampleV2 Sample="sentence">
                                    </SampleV2>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="mt-3">No favorite sentences yet</p>
                        }
                    </div>
                </Content>
            </Tab>
            <Tab Title="Stats">
                <Content>
                    <div class="row">
                        @if (Stats.Any())
                        {
                            <p class="mt-3">Words progress</p>

                            @foreach (var stat in Stats.OrderBy(x => x.Value))
                            {
                                <div class="col-6">
                                    <a href="@($"/word/{@stat.Key}")">@stat.Key</a>
                                </div>
                                <div class="col-6">
                                    <div class="progress m-2" role="progressbar" aria-valuemin="0" aria-valuemax="10">
                                        <div class="progress-bar" style="width: @(stat.Value * 10)%">
                                            @* @stat.Value *@
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="mt-3">No stats yet</p>
                        }
                    </div>
                </Content>
            </Tab>
        </Tabs>
    }

    @if (Favorites.HasNoValue)
    {
        <div class="text-center">
            <Spinner />
        </div>
    }

    @if (Favorites.HasValue && Favorites.Value.IsFailure)
    {
        <h3 class="alert-warning">@Favorites.Value.Error</h3>

        if (Favorites.Value.Error == Errors.AuthRequired)
        {
            <a href="Account/Login" class="btn btn-primary">Login</a>
        }
    }
</div>

<Preload LoadingText="Loading..." />