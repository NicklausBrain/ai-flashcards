@page "/translate-game/et"
@page "/translate-game/et/{etWord}/{sampleIndex:int}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using My1kWordsEe.Components.Layout
@using My1kWordsEe.Models
@using My1kWordsEe.Models.Games
@using My1kWordsEe.Services
@using My1kWordsEe.Services.Cqs
@using My1kWordsEe.Services.Scoped

@inject TranslateToEtGameFactory TranslateToEtGameFactory
@inject FavoritesStateContainer FavoritesStateContainer
@inject NavigationManager Navigation
@inject UrlService Url
@inject IJSRuntime JS

@code {
    [Parameter]
    public string? EtWord { get; init; }

    [Parameter]
    public int? SampleIndex { get; init; }

    Maybe<TranslateToEtGame> Game;
    Maybe<string> GameGenerationError;

    protected override async Task OnParametersSetAsync()
    {
        var gameGen = await TranslateToEtGameFactory.Generate(EtWord, SampleIndex);
        if (gameGen.IsSuccess)
        {
            if (EtWord == null)
            {
                Navigation.NavigateTo($"/translate-game/et/{gameGen.Value.EtWord}/{gameGen.Value.SampleIndex}");
            }
            else
            {
                Game = gameGen.Value;
            }
        }
        else
        {
            GameGenerationError = gameGen.Error;
        }
        await base.OnParametersSetAsync();
    }

    // todo add succes/fail sound
    private async Task OnSubmit()
    {
        await Game.Value.Submit();
        // todo: not nice
        if (Game.Value.CheckResult.HasValue)
        {
            var checkResult = Game.Value.CheckResult.Value;
            _ = FavoritesStateContainer.UpdateScore(
            EtWord,
            checkResult.Value.Match >= 4
            ? UpdateScoreCommand.ScoreUpdate.Up
            : UpdateScoreCommand.ScoreUpdate.Down);
            _ = PlaySample();
        }
    }

    private void OnGiveUp()
    {
        Game.Value.GiveUp();
        _ = FavoritesStateContainer.UpdateScore(
        EtWord,
        UpdateScoreCommand.ScoreUpdate.Down);
        _ = PlaySample();
    }

    private async Task PlaySample()
    {
        await JS.InvokeVoidAsync("playAudioSample", Game.Value.AudioUrl);
    }

    private void RegenGame() => Navigation.NavigateTo($"/translate-game/et");
}

<script>
    window.playAudioSample = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };
</script>

<div class="text-left">
    <div class="row">
        <div class="col-7">
            <h3>Translate to Estonian</h3>
        </div>
        <div class="col-5">
            @if (Game.HasValue && Game.Value.IsFinished)
            {
                <Button Color="ButtonColor.Primary" Type="ButtonType.Reset" @onclick="@RegenGame">
                    <i class="bi bi-arrow-repeat"></i>
                    Try again!
                </Button>
            }
        </div>
    </div>
    <div class="row">

        @if (Game.HasValue)
        {
            var game = Game.Value;
            <div class="row">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">
                            @game.EnSentence
                            <FavoriteOutlineButton Sample="@game.SampleSentence" />
                        </h5>
                        <img id="sampleImage" class="img-fluid rounded img-max-w-256 p-1"
                            src="@Url.Resolve(game.ImageUrl)" />

                        @if (game.CheckResult.HasValue && game.CheckResult.Value.IsSuccess)
                        {
                            var checkResult = game.CheckResult.Value.Value;

                            <ul class="list-group">
                                @if (checkResult.IsMaxMatch)
                                {
                                    <li class="list-group-item list-group-item-success">
                                        @checkResult.EtUserSentence
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item list-group-item-warning">
                                        @checkResult.EtUserSentence
                                        (@checkResult.Match / 5)
                                    </li>
                                    <li class="list-group-item list-group-item-success">
                                        @checkResult.EtExpectedSentence
                                    </li>
                                    <li class="list-group-item list-group-item-info">
                                        @checkResult.EnComment
                                    </li>
                                }
                            </ul>
                        }
                        @if (game.CheckResult.HasValue && game.CheckResult.Value.IsFailure)
                        {
                            <p class="text-danger">
                                @game.CheckResult.Value.Error
                            </p>
                        }
                        @if (game.IsCheckInProgress)
                        {
                            <div class="text-center">
                                <Spinner />
                            </div>
                        }
                        else if (game.CheckResult.HasNoValue)
                        {
                            <div class="row">
                                <div class="col-md-4">
                                    <label>Your translation:</label>
                                </div>
                                <div class="col-md-4 p-1">
                                    <InputTextArea @bind-Value="@game.UserTranslation" class="form-control"
                                        autocomplete="off" />
                                </div>
                                <div class="col-md-4">
                                    <button @onclick="@OnSubmit" class="btn btn-outline-primary" type="button">Submit</button>
                                    <button @onclick="@OnGiveUp" class="btn btn-outline-danger" type="button">Give up</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (GameGenerationError.HasNoValue)
        {
            <div class="d-flex justify-content-center">
                <Spinner />
            </div>
        }

        @if (GameGenerationError.HasValue)
        {
            <p class="text-danger">
                @GameGenerationError
            </p>
        }
    </div>
</div>
<Preload LoadingText="Loading..." />