@page "/word-2-word-match-game/en"

@rendermode InteractiveServer

@using BlazorBootstrap
@using My1kWordsEe.Models
@using My1kWordsEe.Models.Games
@using My1kWordsEe.Services.Cqs

@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    Word2WordMatchGame Game = new(Array.Empty<Word2WordMatchGame.Pair>());

    string[] EeWords = Array.Empty<string>();
    string[] EnWords = Array.Empty<string>();

    string SelectedEeWord = string.Empty;
    string SelectedEnWord = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Game = await Word2WordMatchGame.Generate();
        this.EeWords = Game.EeWords.Keys.ToArray();
        this.EnWords = Game.EnWords.Keys.ToArray();
        Random.Shared.Shuffle(EeWords);
        Random.Shared.Shuffle(EnWords);
        await base.OnParametersSetAsync();
    }

    private void SelectEnWord(string enWord)
    {
        if (Game.EnWords[enWord].IsMatched)
        {
            return;
        }
        SelectedEnWord = enWord;
        this.TryMatch();
    }

    private void SelectEeWord(string eeWord)
    {
        if (Game.EeWords[eeWord].IsMatched)
        {
            return;
        }
        SelectedEeWord = eeWord;
        this.TryMatch();
    }

    private CardColor GetEnCardColor(string enWord)
    {
        if(SelectedEnWord == enWord)
        {
            return CardColor.Warning;
        }

        if (Game.EnWords[enWord].IsMatched)
        {
            return CardColor.Success;
        }

        return CardColor.Light;
    }

    private CardColor GetEeCardColor(string eeWord)
    {
        if(SelectedEeWord == eeWord)
        {
            return CardColor.Warning;
        }

        if (Game.EeWords[eeWord].IsMatched)
        {
            return CardColor.Success;
        }

        return CardColor.Light;
    }

    private void TryMatch()
    {
        if(string.IsNullOrEmpty(SelectedEeWord) || string.IsNullOrEmpty(SelectedEnWord))
        {
            return;
        }

        var hasMatch = Game.TryMatch(SelectedEeWord, SelectedEnWord);

        if (hasMatch)
        {
            ToastService.Notify(new ToastMessage(ToastType.Success, "Great match!"));
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Try again!"));
        }

        SelectedEeWord = string.Empty;
        SelectedEnWord = string.Empty;
    }
}

<div class="text-left">
    <div class="row">
        <div class="col-4">
            <h3>Match word pairs</h3>
        </div>
        <div class="col-8">
            @if (Game.IsFinished)
            {
                <Button Color="ButtonColor.Primary" Type="ButtonType.Reset" @onclick="@OnParametersSetAsync">
                    <i class="bi bi-arrow-repeat"></i>
                    Try again!
                </Button>
            }
        </div>
    </div>
    <div class="row">
        @if (Game.Pairs.Any())
        {
            <div class="col-6 p-1">
                @foreach (var enWord in this.EnWords)
                {
                    <Card Color="@GetEnCardColor(enWord)" Class="mb-4" role="button" @onclick="@(e => SelectEnWord(enWord))">
                        <CardBody>
                            <CardTitle>@enWord</CardTitle>
                        </CardBody>
                    </Card>
                }
            </div>

            <div class="col-6 p-1">
                @foreach (var eeWord in this.EeWords)
                {
                    <Card Color="@GetEeCardColor(eeWord)" Class="mb-4" role="button" @onclick="@(e => SelectEeWord(eeWord))">
                        <CardBody>
                            <CardTitle>@eeWord</CardTitle>
                        </CardBody>
                    </Card>
                }
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <Spinner />
            </div>
        }
    </div>
</div>

<Toasts class="p-3" AutoHide="true" StackLength="5" Placement="ToastsPlacement.TopRight" />