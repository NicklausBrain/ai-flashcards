@page "/word-2-word-match-game/en"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using My1kWordsEe.Models
@using My1kWordsEe.Models.Games
@using My1kWordsEe.Services.Cqs

@inject IJSRuntime JS

@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    Word2WordMatchGame Game = Word2WordMatchGame.Empty;

    string SelectedEeWord = string.Empty;
    string SelectedEnWord = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Game = Word2WordMatchGame.Empty;
        Game = await Word2WordMatchGame.Generate();
        await base.OnParametersSetAsync();
    }

    private Task SelectEnWord(string enWord)
    {
        if (Game.EnWords[enWord].IsMatched)
        {
            // ignore already matched words
            return Task.CompletedTask;
        }
        SelectedEnWord = enWord;
        return this.TryMatch();
    }

    private Task SelectEeWord(string eeWord)
    {
        if (Game.EeWords[eeWord].IsMatched)
        {
            // ignore already matched words
            return Task.CompletedTask;
        }
        SelectedEeWord = eeWord;
        return this.TryMatch();
    }

    private CardColor GetEnCardColor(string enWord)
    {
        if (SelectedEnWord == enWord)
        {
            return CardColor.Warning;
        }

        if (Game.EnWords[enWord].IsMatched)
        {
            return CardColor.Success;
        }

        return CardColor.Light;
    }

    private CardColor GetEeCardColor(string eeWord)
    {
        if (SelectedEeWord == eeWord)
        {
            return CardColor.Warning;
        }

        if (Game.EeWords[eeWord].IsMatched)
        {
            return CardColor.Success;
        }

        return CardColor.Light;
    }

    private async Task TryMatch()
    {
        if (string.IsNullOrEmpty(SelectedEeWord) || string.IsNullOrEmpty(SelectedEnWord))
        {
            return;
        }

        var hasMatch = Game.TryMatch(SelectedEeWord, SelectedEnWord);

        if (hasMatch)
        {
            ToastService.Notify(new ToastMessage(ToastType.Success, "Great match!"));
            await SpeakWord(SelectedEeWord);
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Try again!"));
        }

        SelectedEeWord = string.Empty;
        SelectedEnWord = string.Empty;
    }

    private async Task SpeakWord(string eeWord)
    {
        await JS.InvokeVoidAsync("speakWordMatch", eeWord);
    }
}

<script>
    window.speakWordMatch = (audioId) => {
        setTimeout(() => {
            const audio = document.getElementById(audioId);
            audio.play();
        }, 0);
    };
</script>

<div class="text-left">
    <div class="row">
        <div class="col-6">
            <h3>Match word pairs</h3>
        </div>
        <div class="col-6">
            @if (Game.IsFinished)
            {
                <Button Color="ButtonColor.Primary" Type="ButtonType.Reset" @onclick="@OnParametersSetAsync">
                    <i class="bi bi-arrow-repeat"></i>
                    Try again!
                </Button>
            }
        </div>
    </div>
    <div class="row">
        @if (Game.IsReady)
        {
            <div class="col-6 p-1">
                @foreach (var enWord in Game.EnWords2Match.Concat(Game.Matches.Select(m => m.EnWord)))
                {
                    <Card Color="@GetEnCardColor(enWord)" Class="mb-4" role="button" @onclick="@(e => SelectEnWord(enWord))">
                        <CardBody>
                            <CardTitle>@enWord</CardTitle>
                        </CardBody>
                    </Card>
                }
            </div>

            <div class="col-6 p-1">
            @foreach (var eeWord in Game.EeWords2Match.Concat(Game.Matches.Select(m => m.EeWord)))
                {
                    <Card Color="@GetEeCardColor(eeWord)" Class="mb-4" role="button" @onclick="@(e => SelectEeWord(eeWord))">
                        <CardBody>
                            <CardTitle>@eeWord</CardTitle>
                            <audio id="@eeWord" src="@Game.EeWords[eeWord].EeAudioUrl"></audio>
                        </CardBody>
                    </Card>
                }
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <Spinner />
            </div>
        }
    </div>
</div>

<Toasts class="p-3" AutoHide="true" StackLength="5" Placement="ToastsPlacement.BottomRight" />