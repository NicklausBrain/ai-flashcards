@page "/listen-game/ee"
@page "/listen-game/ee/{eeWord}/{sampleIndex:int}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using My1kWordsEe.Models
@using My1kWordsEe.Models.Games
@using My1kWordsEe.Services.Cqs

@inject GetOrAddSampleWordCommand EnsureWordCommand;
@inject AddSampleSentenceCommand CreateSampleCommand;
@inject CheckEeListeningCommand CheckEeListeningCommand;
@inject NavigationManager Navigation;
@inject IJSRuntime JS;

@code {
    [Parameter]
    public string? EeWord { get; init; }

    [Parameter]
    public int? SampleIndex { get; init; }

    ListenToEeGame Game = ListenToEeGame.Empty;
    Maybe<string> GameGenerationError;

    protected override async Task OnParametersSetAsync()
    {
        Game = ListenToEeGame.Empty;
        var gameGen = await ListenToEeGame.Generate(EnsureWordCommand, CreateSampleCommand, EeWord, SampleIndex);
        if (gameGen.IsSuccess)
        {
            if (EeWord == null)
            {
                Navigation.NavigateTo($"/listen-game/ee/{gameGen.Value.EeWord}/{gameGen.Value.SampleIndex}");
            }
            else
            {
                Game = gameGen.Value;
            }
        }
        else
        {
            GameGenerationError = gameGen.Error;
        }
        await base.OnParametersSetAsync();
    }

    private void RegenGame() => Navigation.NavigateTo($"/listen-game/ee");

    // todo add succes/fail sound
    private async Task OnSubmit()
    {
        Game.UserInput = UserInput;
        await Game.Submit(CheckEeListeningCommand);
    }

    private async Task PlaySample()
    {
        await JS.InvokeVoidAsync("playAudioSample", Game.AudioUrl);
    }

    private List<string> UserInputWords = new List<string>();
    private string UserInput => string.Join(" ", UserInputWords);

    private void AddUserInputWord(string word)
    {
        UserInputWords.Add(word);
    }

    private void DropUserInputWord(int index)
    {
        UserInputWords.RemoveAt(index);
    }
}

<script>
    window.playAudioSample = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };
</script>

<div class="text-left">
    <div class="row">
        <div class="col-7">
            <h3>Listen and catch Estonian speech</h3>
        </div>
        <div class="col-5">
            @if (Game.IsFinished)
            {
                <Button Color="ButtonColor.Primary" Type="ButtonType.Reset" @onclick="@RegenGame">
                    <i class="bi bi-arrow-repeat"></i>
                    Try again!
                </Button>
            }
        </div>
    </div>
    <div class="row">

        @if (Game.IsReady)
        {
            <div class="row">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">
                            <button type="button" class="btn btn-primary btn-sm" @onclick="PlaySample">
                                <i class="bi bi-volume-down-fill"></i>
                            </button>
                            <audio id="@Game.AudioUrl" src="@Game.AudioUrl"></audio>
                        </h5>
                        <img id="sampleImage" class="img-fluid rounded img-max-w-256 p-1" src="@Game.ImageUrl" />

                        @if (Game.CheckResult.HasValue && Game.CheckResult.Value.IsSuccess)
                        {
                            var checkResult = Game.CheckResult.Value.Value;

                            <ul class="list-group">
                                @if (checkResult.IsMaxMatch)
                                {
                                    <li class="list-group-item list-group-item-success">
                                        @checkResult.EeSentence
                                        <br />
                                        (@checkResult.EnSentence)
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item list-group-item-warning">
                                        @checkResult.EeUserSentence
                                        (@checkResult.Match / 5)
                                    </li>
                                    <li class="list-group-item list-group-item-success">
                                        @checkResult.EeSentence
                                        <br />
                                        (@checkResult.EnSentence)
                                    </li>
                                    <li class="list-group-item list-group-item-info">
                                        @checkResult.EnComment
                                    </li>
                                }
                            </ul>
                        }
                        @if (Game.CheckResult.HasValue && Game.CheckResult.Value.IsFailure)
                        {
                            <p class="text-danger">
                                @Game.CheckResult.Value.Error
                            </p>
                        }
                        @if (@Game.IsCheckInProgress)
                        {
                            <div class="text-center">
                                <Spinner />
                            </div>
                        }
                        else if (Game.CheckResult.HasNoValue)
                        {
                            <div class="row mb-1 gap-2">
                                @foreach (var word in Game.RandomizedWords.Except(UserInputWords))
                                {
                                    <Button @onclick="@(() => AddUserInputWord(word))"
                                    Class="col-auto" Type="ButtonType.Button" Color="ButtonColor.Primary">
                                        @word
                                    </Button>
                                }
                            </div>

                            <div class="row mb-1 gap-2">
                                @for(var i = 0; i < UserInputWords.Count; i++)
                                {
                                    var wordIndex = i;
                                    <Button Class="col-auto" Type="ButtonType.Button" Color="ButtonColor.Primary">
                                        @UserInputWords[wordIndex]
                                        <Badge @onclick="@(()=> DropUserInputWord(wordIndex))">
                                            <i class="bi bi-x"></i>
                                        </Badge>
                                    </Button>
                                }
                            </div>

                            <div class="row mb-1">
                                <div class="input-group input-group-sm">
                                    @* <span class="input-group-text btn-success">You hear:</span>
                                    <InputText @bind-Value="@Game.UserInput" class="form-control" autocomplete="off"/> *@
                                    <button @onclick="@OnSubmit" class="btn btn-outline-primary" type="button">Submit</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (GameGenerationError.HasNoValue)
        {
            <div class="d-flex justify-content-center">
                <Spinner />
            </div>
        }

        @if (GameGenerationError.HasValue)
        {
            <p class="text-danger">
                @GameGenerationError
            </p>
        }
    </div>
</div>