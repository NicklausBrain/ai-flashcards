@page "/word/{etWord}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using Microsoft.AspNetCore.Components.Authorization
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Models.Semantics
@using My1kWordsEe.Components.Layout
@using My1kWordsEe.Services.Cqs.Et
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using My1kWordsEe.Services.Scoped

@using static My1kWordsEe.Models.Extensions;

@inject IJSRuntime JS
@inject GetOrAddEtWordCommand GetOrAddEtWordCommand
@inject AddEtSampleSentenceCommand AddEtSampleSentenceCommand
@inject DeleteEtSampleSentenceCommand DeleteEtSampleSentenceCommand
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @inject RedoSampleWordCommand RedoSampleWordCommand *@

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;

    private ConfirmDialog ConfirmDialog = default!;

    [Parameter]
    public required string EtWord { get; init; }

    private Maybe<Result<EtWord>> EtWordData;
    private Maybe<Result<SampleSentenceWithMedia[]>> Samples;
    private ClaimsPrincipal? User;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            User = authState.User;
        }

        EtWordData = EtWord.ValidateWord()
        ? await ResolveSample()
        : Result.Failure<EtWord>("Invalid word");

        await base.OnParametersSetAsync();
    }

    private async Task<Result<EtWord>> ResolveSample()
    {
        var commonSample = await this.GetOrAddEtWordCommand.Invoke(EtWord);
        return commonSample;
    }

    private async Task DeleteSampleSentence(SampleSentenceWithMedia sampleSentence)
    {
        var options = new ConfirmDialogOptions
            {
                IsScrollable = true,
                Dismissable = true,
                IsVerticallyCentered = true,
                AutoFocusYesButton = false,
            };

        var confirmation = await ConfirmDialog.ShowAsync(
        title: "Are you sure you want to delete this?",
        message1: "This will delete the record. Once deleted can not be rolled back.",
        message2: "Do you want to proceed?", options);

        if (confirmation)
        {
            PreloadService.Show(SpinnerColor.Light, "Saving data...");
            var deletionResult = await this.DeleteEtSampleSentenceCommand.Invoke(sampleSentence);
            if (deletionResult.IsSuccess)
            {
                Samples = deletionResult;
                StateHasChanged();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Warning, deletionResult.Error));
            }
            PreloadService.Hide();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));
        }
    }

    private bool IsSampleGenerationInProgress = false;

    private async Task GenerateSample(MouseEventArgs e)
    {
        this.IsSampleGenerationInProgress = true;
        if (IsEtWordDataLoadedOk)
        {
            this.Samples = await this.AddEtSampleSentenceCommand.Invoke(EtWordData.Value.Value.DefaultSense);
        }
        this.IsSampleGenerationInProgress = false;
    }

    private async Task SpeakWord(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("speakWord", EtWord);
    }

    private bool IsEtWordDataLoadedOk => EtWordData.HasValue && EtWordData.Value.IsSuccess;

    private bool HasError => EtWordData.HasValue && EtWordData.Value.IsFailure;

    private string Error => EtWordData.Value.Error;

    private bool IsLoggedIn => User?.Identity?.IsAuthenticated ?? false;
}

<script>
    window.speakWord = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };
</script>

<div class="text-left">
    <div class="row">
        <h1>
            @EtWord

            @if (IsEtWordDataLoadedOk)
            {
                <FavoriteButton Sample="@EtWordData"></FavoriteButton>

                if (EtWordData.Value.Value.AudioUrl != null)
                {
                    <i role="button" class="bi bi-volume-down-fill small" @onclick="SpeakWord">
                        <audio id="@EtWord" src="@EtWordData.Value.Value.AudioUrl"></audio>
                    </i>
                }
            }
        </h1>

        @if (IsEtWordDataLoadedOk)
        {
            var Value = EtWordData.Value.Value;
            <h3>[@Value.Value]</h3>

         @*    @if (Value.Senses.Any())
            {
                <h4>[@string.Join(" / ", Value.Senses.Select(s => s.Explanation.En))]</h4>
            }
 *@
            <h4>@Value.DefaultSense.Explanation.Et</h4>
            <h4>@Value.DefaultSense.Explanation.En</h4>
        }
        else if (HasError)
        {
            <h3 class="alert-warning">@Error</h3>
        }
        else
        {
            <div class="text-center">
                <Spinner />
            </div>
        }
    </div>

    @if (Samples.HasValue && Samples.Value.IsSuccess)
    {
        <div class="row">
            @foreach (var sample in Samples.Value.Value)
            {
                <div class="col col-12 col-sm-6 p-1">
                    @* <SampleV2 Sample="@sample" DeleteSample="DeleteSampleSentence">
                    </SampleV2> *@
                </div>
            }

            <div class="col col-12 col-sm-6 p-1 text-center">
                @if (IsSampleGenerationInProgress)
                {
                    <div class="text-center">
                        <Spinner />
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-primary" onclick="@GenerateSample">
                        <i class="bi bi-robot"></i>
                        Generate sample sentence
                    </button>
                }
            </div>
        </div>
    }
</div>

<Preload LoadingText="Loading..." />
<ConfirmDialog @ref="ConfirmDialog" />
<Toasts class="p-3" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />