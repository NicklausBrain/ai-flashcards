@page "/word/{Word}"
@page "/word/{Word}/{SenseIndex:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using Microsoft.AspNetCore.Components.Authorization
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Components.Layout.Grammar
@using My1kWordsEe.Models.Semantics
@using My1kWordsEe.Components.Layout
@using My1kWordsEe.Services
@using My1kWordsEe.Services.Cqs.Et
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using My1kWordsEe.Services.Scoped

@using static My1kWordsEe.Models.Extensions;

@inject IJSRuntime JS
@inject UrlService Url
@inject GetOrAddEtWordCommand GetOrAddEtWordCommand
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    public const string SamplesTab = "SamplesTab";
    public const string FormsTab = "FormsTab";

    [Parameter]
    public required string Word { get; init; }
    [Parameter]
    public int SenseIndex { get; init; } = 0;
    [SupplyParameterFromQuery]
    public string? Tab { get; init; }

    private Maybe<Result<EtWord>> EtWordData;
    private ClaimsPrincipal? User;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            User = authState.User;
        }

        EtWordData = Word.ValidateWord()
        ? await this.GetOrAddEtWordCommand.Invoke(Word)
        : Result.Failure<EtWord>("Invalid word");

        // todo: validate sense index

        await base.OnParametersSetAsync();
    }

    private async Task SpeakWord(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("speakWord", Word);
    }

    private async Task OnSelectTab(TabEventArgs args)
    {
        await JS.InvokeVoidAsync("replaceAddress", $"/word/{Word}/{SenseIndex}?{nameof(Tab)}={args.Name}");
    }

    private bool IsEtWordDataLoadedOk => EtWordData.HasValue && EtWordData.Value.IsSuccess;

    private bool HasError => EtWordData.HasValue && EtWordData.Value.IsFailure;

    private string Error => EtWordData.Value.Error;

    private bool IsLoggedIn => User?.Identity?.IsAuthenticated ?? false;

    private EtWord EtWord => EtWordData.Value.Value;
}

<script>
    window.speakWord = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };

    function replaceAddress(url) {
        history.replaceState(null, "", url);
    }
</script>

<div class="text-left">
    <div class="row">
        <h1>
            @Word

            @if (IsEtWordDataLoadedOk)
            {
                <FavoriteButton Sample="@EtWord"></FavoriteButton>

                if (EtWord.AudioUrl != null)
                {
                    <i role="button" class="bi bi-volume-down-fill small" @onclick="SpeakWord">
                        <audio id="@Word" src="@Url.Resolve(EtWord.AudioUrl)"></audio>
                    </i>
                }
            }
        </h1>

        @if (IsEtWordDataLoadedOk)
        {
            @if (EtWord.Senses.Any())
            {
                <h4>
                    @for (var i = 0; i < EtWord.Senses.Length; i++)
                    {
                        <text>[</text>
                        if (i == SenseIndex)
                        {
                            @EtWord.Senses[i].Word.En
                        }
                        else
                        {
                            <a href="@($"/word/{EtWord.Senses[i].Word.Et}/{i}")">@EtWord.Senses[i].Word.En</a>
                        }
                        <text>]</text>
                    }
                </h4>
            }

            <h4>@EtWord.Senses[SenseIndex].Definition.En</h4>
        }
        else if (HasError)
        {
            <h3 class="alert-warning">@Error</h3>
        }
        else
        {
            <div class="text-center">
                <Spinner />
            </div>
        }
    </div>

    @if (IsEtWordDataLoadedOk)
    {
        // temporal solution
        if (@EtWord.Senses[SenseIndex].IsNoun)
        {
            <Tabs EnableFadeEffect="true">
                <Tab Name="@SamplesTab" Title="Samples" Active="@(Tab == SamplesTab)" OnClick="OnSelectTab">
                    <Content>
                        <SamplesGrid EtWord="EtWord" SenseIndex="SenseIndex" />
                    </Content>
                </Tab>
                <Tab Name="@FormsTab" Title="Forms" Active="@(Tab == FormsTab)" OnClick="OnSelectTab">
                    <Content>
                        <FormsGrid EtWord="EtWord" SenseIndex="SenseIndex" />
                    </Content>
                </Tab>
            </Tabs>
        }
        else
        {
            <SamplesGrid EtWord="EtWord" SenseIndex="SenseIndex" />
        }
    }
</div>

<Preload LoadingText="Loading..." />
<Toasts class="p-3" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />