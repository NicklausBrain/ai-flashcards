@page "/word/{eeWord}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using Microsoft.AspNetCore.Components.Authorization
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Services;
@using My1kWordsEe.Models;
@using My1kWordsEe.Components.Layout;
@using My1kWordsEe.Services.Cqs;
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using My1kWordsEe.Services.Scoped

@inject IJSRuntime JS
@inject GetOrAddSampleWordCommand EnsureWordCommand
@inject GetFavoritesQuery GetFavoritesQuery
@inject AddSampleSentenceCommand CreateSampleCommand
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FavoritesStateContainer FavoritesStateContainer
@inject DeleteSampleSentenceCommand DeleteSampleSentenceCommand
@inject RedoSampleWordCommand RedoSampleWordCommand
@inject ValidateSampleWordCommand ValidateSampleWordCommand


@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;

    private ConfirmDialog ConfirmDialog = default!;

    [Parameter]
    public required string EeWord { get; init; }

    private Maybe<Result<SampleWord>> WordMetadata;
    private Maybe<Result<Favorites>> Favorites;
    private ClaimsPrincipal? User;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            User = authState.User;
        }

        WordMetadata = EeWord.ValidateWord()
        ? await ResolveSample()
        : Result.Failure<SampleWord>("Invalid word");

        await base.OnParametersSetAsync();
    }

    private async Task<Result<SampleWord>> ResolveSample()
    {
        var commonSample = this.EnsureWordCommand.Invoke(EeWord);
        if (IsLoggedIn)
        {
            var favorites = FavoritesStateContainer.GetAsync();
            await Task.WhenAll(commonSample, favorites);

            if (favorites.Result.IsSuccess)
            {
                Favorites = favorites.Result;
            }
        }

        return await commonSample;
    }

    private async Task AddToFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        Favorites = await FavoritesStateContainer.AddAsync(favorite);
        await Task.Delay(300);
        PreloadService.Hide();
        StateHasChanged();
    }

    private async Task RemoveFromFavorites(dynamic favorite)
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        Favorites = await FavoritesStateContainer.RemoveAsync(favorite);
        PreloadService.Hide();
        await Task.Delay(300);
        StateHasChanged();
    }

    private async Task DeleteSampleSentence(SampleSentence sampleSentence)
    {
        var options = new ConfirmDialogOptions
            {
                IsScrollable = true,
                Dismissable = true,
                IsVerticallyCentered = true,
                AutoFocusYesButton = false,
            };

        var confirmation = await ConfirmDialog.ShowAsync(
        title: "Are you sure you want to delete this?",
        message1: "This will delete the record. Once deleted can not be rolled back.",
        message2: "Do you want to proceed?", options);

        if (confirmation)
        {
            PreloadService.Show(SpinnerColor.Light, "Saving data...");
            var deletionResult = await this.DeleteSampleSentenceCommand.Invoke(sampleSentence);
            if (deletionResult.IsSuccess)
            {
                WordMetadata = deletionResult;
                StateHasChanged();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Warning, deletionResult.Error));
            }
            PreloadService.Hide();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));
        }
    }

    private async Task RedoSample()
    {
        var options = new ConfirmDialogOptions
            {
                IsScrollable = true,
                Dismissable = true,
                IsVerticallyCentered = true,
                AutoFocusYesButton = false,
            };

        var confirmation = await ConfirmDialog.ShowAsync(
        title: "Is this word described inadequately?",
        message1: "This will regenerate the word explanation and all the samples will removed.",
        message2: "Do you want to proceed?", options);

        if (confirmation)
        {
            PreloadService.Show(SpinnerColor.Light, "Saving data...");

            var redoResult = await this.ValidateSampleWordCommand.Invoke(Value).Bind(r =>
            this.RedoSampleWordCommand.Invoke(Value.EeWord, r.EeExplanationMessage));

            if (redoResult.IsSuccess)
            {
                WordMetadata = redoResult;
                StateHasChanged();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Warning, redoResult.Error));
            }
            PreloadService.Hide();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Redo action canceled."));
        }
    }

    private bool IsSampleGenerationInProgress = false;

    private async Task GenerateSample(MouseEventArgs e)
    {
        this.IsSampleGenerationInProgress = true;
        if (IsDataLoadedOk)
        {
            this.WordMetadata = await this.CreateSampleCommand.Invoke(Value);
        }
        this.IsSampleGenerationInProgress = false;
    }

    private async Task SpeakWord(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("speakWord", EeWord);
    }

    private bool IsDataLoadedOk => WordMetadata.HasValue && WordMetadata.Value.IsSuccess;

    private bool HasError => WordMetadata.HasValue && WordMetadata.Value.IsFailure;

    private SampleWord Value => WordMetadata.Value.Value;

    private string Error => WordMetadata.Value.Error;

    private bool IsLoggedIn => User?.Identity?.IsAuthenticated ?? false;

    private bool IsFavorite() => IsDataLoadedOk && IsLoggedIn && Favorites.HasValue && Favorites.Value.IsSuccess &&
    Favorites.Value.Value.Words.ContainsKey(EeWord.ToLower());

    private bool IsFavorite(SampleSentence sentence) => IsDataLoadedOk && IsLoggedIn && Favorites.HasValue &&
    Favorites.Value.IsSuccess && Favorites.Value.Value.Sentences.ContainsKey(sentence.EeSentence.ToLower());
}

<script>
    window.speakWord = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };
</script>

<div class="text-left">
    <div class="row">
        <h1>
            @EeWord

            @if (IsFavorite())
            {
                <i role="button" class="bi bi-star-fill favorite-active" @onclick="() => RemoveFromFavorites(Value)"></i>
            }
            else
            {
                <i role="button" class="bi bi-star" @onclick="() => AddToFavorites(Value)"></i>
            }

            @if (IsDataLoadedOk && Value.EeAudioUrl != null)
            {
                <i role="button" class="bi bi-volume-down-fill small" @onclick="SpeakWord">
                    <audio id="@EeWord" src="@Value.EeAudioUrl"></audio>
                </i>
            }

            @if (IsLoggedIn)
            {
                <i role="button" class="bi bi-arrow-clockwise float-end" @onclick="RedoSample"></i>
            }
        </h1>

        @if (IsDataLoadedOk)
        {
            <h3>[@Value.EnWord]</h3>

            @if (Value.EnWords.Any())
            {
                <h4>[@string.Join(" / ", Value.EnWords)]</h4>
            }

            <h4>@Value.EnExplanation</h4>
        }
        else if (HasError)
        {
            <h3 class="alert-warning">@Error</h3>
        }
        else
        {
            <div class="text-center">
                <Spinner />
            </div>
        }
    </div>

    @if (IsDataLoadedOk)
    {
        <div class="row">
            @foreach (var sample in Value.Samples)
            {
                <div class="col col-12 col-sm-6 p-1">
                    <SampleV2 Sample="@sample" DeleteSample="DeleteSampleSentence">
                    </SampleV2>
                </div>
            }

            <div class="col col-12 col-sm-6 p-1 text-center">
                @if (IsSampleGenerationInProgress)
                {
                    <div class="text-center">
                        <Spinner />
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-primary" onclick="@GenerateSample">
                        <i class="bi bi-robot"></i>
                        Generate sample sentence
                    </button>
                }
            </div>
        </div>
    }
</div>

<Preload LoadingText="Loading..." />
<ConfirmDialog @ref="ConfirmDialog" />
<Toasts class="p-3" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />