@page "/word/{eeWord}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using Microsoft.AspNetCore.Components.Authorization
@using My1kWordsEe.Components.Account
@using My1kWordsEe.Services;
@using My1kWordsEe.Models;
@using My1kWordsEe.Components.Layout;
@using My1kWordsEe.Services.Cqs;
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@inject IJSRuntime JS
@inject GetOrAddSampleWordCommand EnsureWordCommand
@inject GetFavoritesQuery GetFavoritesQuery
@inject AddSampleSentenceCommand CreateSampleCommand
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject AddToFavoritesCommand AddToFavoritesCommand
@inject RemoveFromFavoritesCommand RemoveFromFavoritesCommand

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter]
    public required string EeWord { get; init; }

    private Maybe<Result<SampleWord>> WordMetadata;
    private Maybe<Result<Favorites>> Favorites;
    private ClaimsPrincipal? User;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            User = authState.User;
        }

        WordMetadata = EeWord.ValidateWord()
            ? await ResolveSample()
            : Result.Failure<SampleWord>("Invalid word");

        await base.OnParametersSetAsync();
    }

    private async Task<Result<SampleWord>> ResolveSample()
    {
        var commonSample = this.EnsureWordCommand.Invoke(EeWord);
        if (IsLoggedIn)
        {
            var user = await UserAccessor.GetRequiredUserAsync(User);
            var favorites = GetFavoritesQuery.Invoke(user.Id);
            await Task.WhenAll(commonSample, favorites);

            if (favorites.Result.IsSuccess)
            {
                Favorites = favorites.Result;
                var favoriteWords = favorites.Result.Value.Words;
                if (favoriteWords.ContainsKey(EeWord))
                {
                    return favoriteWords[EeWord];
                }
            }
        }

        return await commonSample;
    }

    private async Task AddToFavorites()
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        var user = await UserAccessor.GetRequiredUserAsync(User);
        await AddToFavoritesCommand.Invoke(user.Id, Value);
        await OnParametersSetAsync();
        PreloadService.Hide();
    }

    private async Task RemoveFromFavorites()
    {
        PreloadService.Show(SpinnerColor.Light, "Saving data...");
        var user = await UserAccessor.GetRequiredUserAsync(User);
        await RemoveFromFavoritesCommand.Invoke(user.Id, Value.EeWord);
        await OnParametersSetAsync();
        PreloadService.Hide();
    }

    private bool IsSampleGenerationInProgress = false;

    private async Task GenerateSample(MouseEventArgs e)
    {
        this.IsSampleGenerationInProgress = true;
        if (IsDataLoadedOk)
        {
            this.WordMetadata = await this.CreateSampleCommand.Invoke(Value);
        }
        this.IsSampleGenerationInProgress = false;
    }

    private async Task SpeakWord(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("speakWord", EeWord);
    }

    private bool IsDataLoadedOk => WordMetadata.HasValue && WordMetadata.Value.IsSuccess;

    private bool HasError => WordMetadata.HasValue && WordMetadata.Value.IsFailure;

    private SampleWord Value => WordMetadata.Value.Value;

    private string Error => WordMetadata.Value.Error;

    private bool IsLoggedIn => User?.Identity?.IsAuthenticated ?? false;
}

<script>
    window.speakWord = async (audioId) => {
        const audio = document.getElementById(audioId);
        await audio.play();
    };
</script>

<div class="text-left">
    <div class="row">
        <h1>
            @EeWord

            @if (IsDataLoadedOk && IsLoggedIn)
            {
                @if (Favorites.Value.Value.Words.ContainsKey(EeWord.ToLower()))
                {
                    <i role="button" class="bi bi-star-fill" @onclick="RemoveFromFavorites"></i>
                }
                else
                {
                    <i role="button" class="bi bi-star" @onclick="AddToFavorites"></i>
                }
            }

            @if (IsDataLoadedOk && Value.EeAudioUrl != null)
            {
                <i role="button" class="bi bi-volume-down-fill small" @onclick="SpeakWord">
                    <audio id="@EeWord" src="@Value.EeAudioUrl"></audio>
                </i>
            }
        </h1>

        @if (IsDataLoadedOk)
        {
            <h3>[@Value.EnWord]</h3>

            @if (Value.EnWords.Any())
            {
                <h4>[@string.Join(" / ", Value.EnWords)]</h4>
            }

            <h4>@Value.EnExplanation</h4>
        }
        else if (HasError)
        {
            <h3 class="alert-warning">@Error</h3>
        }
        else
        {
            <div class="text-center">
                <Spinner />
            </div>
        }
    </div>

    @if (IsDataLoadedOk)
    {
        <div class="row">
            @foreach (var sample in Value.Samples)
            {
                <div class="col col-12 col-sm-6 p-1">
                    <SampleV2 Sample="@sample">
                    </SampleV2>
                </div>
            }

            <div class="col col-12 col-sm-6 p-1 text-center">
                @if (IsSampleGenerationInProgress)
                {
                    <div class="text-center">
                        <Spinner />
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-primary" onclick="@GenerateSample">
                        <i class="bi bi-robot"></i>
                        Generate sample sentence
                    </button>
                }
            </div>
        </div>
    }
    <Preload LoadingText="Loading..." />
</div>
