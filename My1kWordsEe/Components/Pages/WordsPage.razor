@page "/"

@rendermode InteractiveServer

@using BlazorBootstrap
@using CSharpFunctionalExtensions
@using My1kWordsEe.Models;
@using My1kWordsEe.Components.Layout;
@using My1kWordsEe.Models.Semantics
@using My1kWordsEe.Services.Cqs
@using My1kWordsEe.Services.Cqs.Et

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject GetOrAddEtWordCommand GetOrAddEtWordCommand;
@inject Ee1kWords Ee1KWords;

@code {

    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }
    public string SearchTermTrimmed => SearchTerm?.ToString()?.Trim() ?? string.Empty;

    private bool IsCheckInProgress = false;
    private Maybe<Result<EtWord>> CheckWordResult;

    protected override async Task OnParametersSetAsync()
    {
        this.Ee1KWords = Ee1KWords.WithSearch(SearchTermTrimmed);
        await base.OnParametersSetAsync();
    }

    private void SelectWord(string word)
    {
        this.NavigationManager.NavigateTo($"/word/{word}");
    }

    private async Task OnSearchInput()
    {
        this.CheckWordResult = default;
        await OnParametersSetAsync();
        await JS.InvokeVoidAsync("replaceAddress", $"?SearchTerm={SearchTermTrimmed}");
    }

    private async Task CheckWord(MouseEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(this.SearchTerm))
        {
            return;
        }

        this.IsCheckInProgress = true;

        this.CheckWordResult = await GetOrAddEtWordCommand.Invoke(this.SearchTerm?.Trim() ?? string.Empty);

        if (this.CheckWordResult.Value.IsSuccess)
        {
            this.NavigationManager.NavigateTo($"/word/{this.SearchTerm}");
        }

        this.IsCheckInProgress = false;
    }
}

<script>
    function replaceAddress(url) {
        history.replaceState(null, "", url);
    }
</script>

<PageTitle>1k Words</PageTitle>

<div class="text-center">
    <div class="row sticky-top">
        <div class="input-group mb-1 small">
            <span class="input-group-text">Search</span>
            <input @bind="SearchTerm" @bind:event="oninput" @bind:after="OnSearchInput" class="form-control"
                aria-label="Search" aria-describedby="inputGroup-sizing-default" />
            @if (IsCheckInProgress)
            {
                <button class="btn btn-outline-primary" type="button">
                    <Spinner Size="SpinnerSize.Small" />
                </button>
            }
            else
            {
                <button @onclick="CheckWord" class="btn btn-outline-primary" type="button">Check the word</button>
            }
        </div>
    </div>
    <div class="row">
        <Grid TItem="EtWord" Class="table table-hover table-bordered table-striped" Data="Ee1KWords.SelectedWords"
            PageSize="9" AllowPaging="true" AllowSorting="true" Responsive="true" AllowRowClick="true"
            OnRowClick="@(args => SelectWord(args.Item.Value))">
            <GridColumns>
                @* <GridColumn TItem="SampleWord" HeaderText="" PropertyName="Id" SortKeySelector="item => WordIndex[item]"
                    Class="col-auto small">
                    @WordIndex[context]
                </GridColumn> *@
                <GridColumn TItem="EtWord" HeaderText="Eestikeelne sõna" PropertyName="Value"
                    SortKeySelector="item => item.Value" Class="col-2 small">
                    @context.Value
                </GridColumn>
                <GridColumn TItem="EtWord" HeaderText="English word(s)" PropertyName="DefaultSense"
                    SortKeySelector="item => item.DefaultSense.Word.En" Class="col-2 small">
                    @context.DefaultSense.Word.En
                    @* @if (context.Senses.Any())
                    {
                        @($" ({string.Join(" / ", context.Senses.Select(s => s.Word.En))})")
                    } *@
                </GridColumn>
                <GridColumn TItem="EtWord" HeaderText="Explanation" PropertyName="DefaultSense"
                    SortKeySelector="item => item.DefaultSense.Definition.En" Class="col-8 small">
                    @context.DefaultSense.Definition.En
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <GridEmptyDataTemplate TItem="EtWord">
                    <div class="d-grid gap-2">
                        @if (CheckWordResult.HasValue && CheckWordResult.Value.IsFailure)
                        {
                            @CheckWordResult.Value.Error
                        }
                        else
                        {
                            <button @onclick="CheckWord" type="button" class="btn btn-primary btn-block btn-sm">
                                @if (IsCheckInProgress)
                                {
                                    <Spinner Size="SpinnerSize.Small" />
                                }
                                else
                                {
                                    <span>Check the word</span>
                                }
                            </button>
                        }
                    </div>
                </GridEmptyDataTemplate>
            </GridTemplates>
        </Grid>
    </div>
</div>